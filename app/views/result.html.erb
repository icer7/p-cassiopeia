<p id="notice"><%= notice %></p>
<div class="ui message">
赤い線を首に、青い線を背中に合わせてください
</div>
<div>
  <canvas style="background-color: white;" id="axisCanvas"></canvas>
  <div class="ui grid">
    <div class="two wide column"></div>
    <div class="four wide column"></div>
    <div class="four wide column">計測結果</div>
    <div class="four wide column"><div class="ui label" id="result-value"></div></div>
  
  </div>
</div>
<a id="test-table"></a>
<%= link_to "始めに戻る", "/", class: "ui primary button" %>
</table>

<br>

<script>
  var canvas, ctx;
  var canvasW = 320;
  var canvasH = 426;
  var img;
  var objX1, objX2, objY;
  var objWidth = 2;
  var objHeight = canvasH;
  var hitWidth = 10;

  canvas = document.getElementById('axisCanvas');
  canvas.width = canvasW;
  canvas.height = canvasH;
  ctx = canvas.getContext('2d');

  // オブジェクトの座標を定義
  objX1 = canvas.width * 2 / 3 - objWidth / 2;
  objX2 = objX1 + 50;
  objY = 0;



  window.onload = function() {
    drawResultValue();

    img = new Image();
    img.src = "/images/1/download";
    img.onload = function(){
      ctx.drawImage(img, 0, 0, canvasW, canvasH);
    }

    function drawRect1(objX1) {
      ctx.fillStyle = "rgb(200, 30, 30)";
      ctx.fillRect(objX1, objY, objWidth, objHeight);
    }
    function drawRect2(objX2) {
      ctx.fillStyle = "rgb(30, 30, 230)";
      ctx.fillRect(objX2, objY, objWidth, objHeight);
    }
    function drawResultValue () {
      var str = String(abs((objX1 - objX2) * 0.16).toFixed(1)) + " cm";
      document.getElementById("result-value").innerText = str;
    }
  
    var x, y, relX1, relX2;
    var dragging = 0;

    function onDownTouch(event) {
      var touch = event.targetTouches[0];
      onDown(touch.pageX, touch.pageY);
    }
    function onDownMouse(event) {
      onDown(event.clientX, event.clientY);
    }
    function onDown(tx, ty) {
      // キャンバスの左上端の座標を取得
      var offsetX = canvas.getBoundingClientRect().left;
      var offsetY = canvas.getBoundingClientRect().top;

      // マウスが押された座標を取得
      x = tx - offsetX;
      y = ty - offsetY;

      // オブジェクト上の座標かどうかを判定
      if (objX1 < (x+hitWidth) && (objX1 + objWidth) > (x-hitWidth)) {
        dragging = 1; // ドラッグ開始
        relX1 = objX1 - x;
      } else if (objX2 < (x+hitWidth) && (objX2 + objWidth) > (x-hitWidth)) {
        dragging = 2; // ドラッグ開始
        relX2 = objX2 - x;
      }
    }

    function onMoveTouch(event) {
      var touch = event.targetTouches[0];
      onMove(touch.pageX, touch.pageY);

      // Call preventDefault() to prevent any further handling
      event.preventDefault();
    }
    function onMoveMouse(event) {
      onMove(event.clientX, event.clientY);
    }
    function onMove(tx, ty) {
      if (dragging == 0) {
        return;
      } 
      // キャンバスの左上端の座標を取得
      var offsetX = canvas.getBoundingClientRect().left;
      var offsetY = canvas.getBoundingClientRect().top;

      // マウスが移動した先の座標を取得
      x = tx - offsetX;
      y = ty - offsetY;

      // ドラッグが開始されていればオブジェクトの座標を更新して再描画
      if (dragging == 1) {
        objX1 = x + relX1;
      } else if (dragging == 2) {
        objX2 = x + relX2;
      }

      drawResultValue();
    }

    function onUp(event) {
      dragging = 0; // ドラッグ終了
    }

    canvas.addEventListener('touchstart', onDownTouch, false);
    canvas.addEventListener('touchmove', onMoveTouch, false);
    canvas.addEventListener('touchend', onUp, false);
    canvas.addEventListener('mousedown', onDownMouse, false);
    canvas.addEventListener('mousemove', onMoveMouse, false);
    canvas.addEventListener('mouseup', onUp, false);

    function abs(val) {
      return val < 0 ? -val : val;
    };

    function loop(timestamp) {
      ctx.clearRect(0, 0, canvasW, canvasH);

      ctx.drawImage(img, 0, 0, canvasW, canvasH);
      // オブジェクトを描画
      drawRect1(objX1);
      drawRect2(objX2);

      window.requestAnimationFrame((ts) => loop(ts));
    }
    
    window.requestAnimationFrame((ts) => loop(ts));  };
</script>
